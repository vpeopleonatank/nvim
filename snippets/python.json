{
  "add": {
    "prefix": "add", "body": ["# %%\n", "$1"],
    "description": "Code snippet for new cell"
  },
  "if": {
    "prefix": "if", "body": ["if ${1:expression}:", "\t${2:pass}"],
    "description": "Code snippet for an if statement"
  },
  "if/else": {
    "prefix": "if/else",
    "body": ["if ${1:condition}:", "\t${2:pass}", "else:", "\t${3:pass}"],
    "description": "Code snippet for an if statement with else"
  },
  "elif": {
    "prefix": "elif",
    "body": ["elif ${1:expression}:", "\t${2:pass}"],
    "description": "Code snippet for an elif"
  },
  "else": {
    "prefix": "else",
    "body": ["else:", "\t${1:pass}"],
    "description": "Code snippet for an else"
  },
  "while": {
    "prefix": "while",
    "body": ["while ${1:expression}:", "\t${2:pass}"],
    "description": "Code snippet for a while loop"
  },
  "while/else": {
    "prefix": "while/else",
    "body": ["while ${1:expression}:", "\t${2:pass}", "else:", "\t${3:pass}"],
    "description": "Code snippet for a while loop with else"
  },
  "for": {
    "prefix": "for",
    "body": ["for ${1:target_list} in ${2:expression_list}:", "\t${3:pass}"],
    "description": "Code snippet for a for loop"
  },
  "for/else": {
    "prefix": "for/else",
    "body": [
      "for ${1:target_list} in ${2:expression_list}:",
      "\t${3:pass}",
      "else:",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a for loop with else"
  },
  "try/except": {
    "prefix": "try/except",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a try/except statement"
  },
  "try/finally": {
    "prefix": "try/finally",
    "body": ["try:", "\t${1:pass}", "finally:", "\t${2:pass}"],
    "description": "Code snippet for a try/finally statement"
  },
  "try/except/else": {
    "prefix": "try/except/else",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}",
      "else:",
      "\t${5:pass}"
    ],
    "description": "Code snippet for a try/except/else statement"
  },
  "try/except/finally": {
    "prefix": "try/except/finally",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}",
      "finally:",
      "\t${5:pass}"
    ],
    "description": "Code snippet for a try/except/finally statement"
  },
  "try/except/else/finally": {
    "prefix": "try/except/else/finally",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}",
      "else:",
      "\t${5:pass}",
      "finally:",
      "\t${6:pass}"
    ],
    "description": "Code snippet for a try/except/else/finally statement"
  },
  "shebang": {
    "prefix": "shebang",
    "body": [
      "#!/usr/bin/env python",
      "# -*- coding: utf-8 -*-",
      "$1"
    ],
    "description": "shebang for python script"
  },
      "main": {
        "prefix": "main",
        "body": [
            "def main():",
            "\t${1:pass}",
            "",
            "",
            "if __name__ == '__main__':",
            "    main()",
            ""
        ],
        "description": "Main function template for a Python script."
    },
    "unittest": {
    "prefix": "unittest",
    "body": [
      "import unittest",
      "$1",
      "\t", 
      "class ${2: MyTestCase}(unittest.TestCase):",
      "    def setUp(self):",
      "        ${3: pass}",
      "\t", 
      "    def ${4: test_func1}(self)",
      "        $5",
      "\t",
      "    def tearDown(self):",
      "        ${6: pass}",
      "\t",
      "if __name__ == '__main__':",
      "    unittest.main()"
    ],
    "description": "Code snippet for unittest"
  },
    "PDB set trace": {
        "prefix": "pdb",
        "body": "import pdb; pdb.set_trace()$0"
    },
    "iPDB set trace": {
        "prefix": "ipdb",
        "body": "import ipdb; ipdb.set_trace()$0"
    },
    "rPDB set trace": {
        "prefix": "rpdb",
        "body": "import rpdb2; rpdb2.start_embedded_debugger('${1:debug_password}')$0"
    },
    "PuDB set trace": {
        "prefix": "pudb",
        "body": "import pudb; pudb.set_trace()$0"
    },
    "IPython set trace": {
        "prefix": "ipydb",
        "body": "from IPython import embed; embed()$0"
    },
    "ptIPython set trace": {
        "prefix": "pti",
        "body": "from ptpython.repl import embed; embed(globals(), locals())$0"
    }
}
